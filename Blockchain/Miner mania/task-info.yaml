type: edu
custom_name: stage3
files:
- name: src/blockchain/Main.java
  visible: true
  text: |
    package blockchain;

    import blockchain.ui.UserInterface;

    public class Main {
        public static void main(String[] args) {
            UserInterface userInterface = new UserInterface();
            userInterface.start();
        }
    }
  learner_created: false
- name: src/blockchain/util/StringUtil.java
  visible: true
  text: |
    package blockchain.util;
    import java.security.MessageDigest;

    public final class StringUtil {
        /* Applies Sha256 to a string and returns a hash. */
        public static String applySha256(String input){
            try {
                MessageDigest digest = MessageDigest.getInstance("SHA-256");
                /* Applies sha256 to our input */
                byte[] hash = digest.digest(input.getBytes("UTF-8"));
                StringBuilder hexString = new StringBuilder();
                for (byte elem: hash) {
                    String hex = Integer.toHexString(0xff & elem);
                    if(hex.length() == 1) hexString.append('0');
                    hexString.append(hex);
                }
                return hexString.toString();
            }
            catch(Exception e) {
                throw new RuntimeException(e);
            }
        }
    }
  learner_created: false
- name: src/blockchain/ui/UserInterface.java
  visible: true
  text: |
    package blockchain.ui;

    import blockchain.impl.Blockchain;

    public class UserInterface {
        public void start() {
            Blockchain blockchain = new Blockchain();

            for (int i = 0; i < 5; i++) {
                blockchain.createBlock();
            }

            System.out.println(blockchain);
        }

    }
  learner_created: false
- name: test/BlockchainTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;


    class BlockParseException extends Exception {
        BlockParseException(String msg) {
            super(msg);
        }
    }


    class Block {

        int id;
        long timestamp;
        long magic;
        String hashprev;
        String hash;

        static Block parseBlock(String strBlock) throws BlockParseException {
            if (strBlock.length() == 0) {
                return null;
            }

            if (!(strBlock.contains("Block:")
                && strBlock.contains("Timestamp:"))) {

                return null;
            }

            Block block = new Block();

            List<String> lines = strBlock
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            if (lines.size() != 11) {
                throw new BlockParseException("Every block should " +
                    "contain 11 lines of data");
            }

            if (!lines.get(0).equals("Block:")) {
                throw new BlockParseException("First line of every block " +
                    "should be \"Block:\"");
            }

            if (!lines.get(1).startsWith("Created by")) {
                throw new BlockParseException("Second line of every block " +
                    "should start with \"Created by\"");
            }

            if (!lines.get(2).startsWith("Id:")) {
                throw new BlockParseException("Third line of every block " +
                    "should start with \"Id:\"");
            }

            String id = lines.get(2).split(":")[1]
                .strip().replace("-", "");
            boolean isNumeric = id.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Id should be a number");
            }

            block.id = Integer.parseInt(id);



            if (!lines.get(3).startsWith("Timestamp:")) {
                throw new BlockParseException("4-th line of every block " +
                    "should start with \"Timestamp:\"");
            }

            String timestamp = lines.get(3).split(":")[1]
                .strip().replace("-", "");
            isNumeric = timestamp.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Timestamp should be a number");
            }

            block.timestamp = Long.parseLong(timestamp);


            if (!lines.get(4).startsWith("Magic number:")) {
                throw new BlockParseException("5-th line of every block " +
                    "should start with \"Magic number:\"");
            }

            String magic = lines.get(4).split(":")[1]
                .strip().replace("-", "");
            isNumeric = magic.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Magic number should be a number");
            }

            block.magic = Long.parseLong(magic);



            if (!lines.get(5).equals("Hash of the previous block:")) {
                throw new BlockParseException("6-th line of every block " +
                    "should be \"Hash of the previous block:\"");
            }

            if (!lines.get(7).equals("Hash of the block:")) {
                throw new BlockParseException("8-th line of every block " +
                    "should be \"Hash of the block:\"");
            }

            String prevhash = lines.get(6).strip();
            String hash = lines.get(8).strip();

            if (!(prevhash.length() == 64 || prevhash.equals("0"))
                || !(hash.length() == 64)) {

                throw new BlockParseException("Hash length should " +
                    "be equal to 64 except \"0\"");
            }

            block.hash = hash;
            block.hashprev = prevhash;

            return block;
        }


        static List<Block> parseBlocks(String output) throws BlockParseException {
            String[] strBlocks = output.split("\n\n");

            List<Block> blocks = new ArrayList<>();

            for (String strBlock : strBlocks) {
                Block block = parseBlock(strBlock.strip());
                if (block != null) {
                    blocks.add(block);
                }
            }

            return blocks;
        }
    }

    class Clue {
        String zeros;
        Clue(int n) {
            zeros = "0".repeat(n);
        }
    }


    public class BlockchainTest extends StageTest<Clue> {

        List<String> previousOutputs = new ArrayList<>();

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                new TestCase<>(),
                new TestCase<>()
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            if (previousOutputs.contains(reply)) {
                return new CheckResult(false,
                    "You already printed this text in the previous tests");
            }

            previousOutputs.add(reply);

            List<Block> blocks;
            try {
                blocks = Block.parseBlocks(reply);
            } catch (BlockParseException ex) {
                return new CheckResult(false, ex.getMessage());
            } catch (Exception ex) {
                return CheckResult.wrong("");
            }

            if (blocks.size() != 5) {
                return new CheckResult(false,
                    "You should output 5 blocks, found " + blocks.size());
            }

            for (int i = 1; i < blocks.size(); i++) {
                Block curr = blocks.get(i - 1);
                Block next = blocks.get(i);

                if (curr.id + 1 != next.id) {
                    return new CheckResult(false,
                        "Id`s of blocks should increase by 1");
                }

                if (next.timestamp < curr.timestamp) {
                    return new CheckResult(false,
                        "Timestamp`s of blocks should increase");
                }

                if (!next.hashprev.equals(curr.hash)) {
                    return new CheckResult(false, "Two hashes aren't equal, " +
                        "but should");
                }
            }


            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/blockchain/util/BlockchainConstants.java
  visible: true
  text: |
    package blockchain.util;

    public final class BlockchainConstants {

        public final static String BLOCK_CHAIN_FILENAME = "blockchain.data";
    }
  learner_created: true
- name: src/blockchain/util/SerializationUtil.java
  visible: true
  text: |
    package blockchain.util;

    import java.io.*;

    public final class SerializationUtil {

        public static void serialize(Object obj, String filename)
                throws IOException {
            FileOutputStream fos = new FileOutputStream(filename);
            BufferedOutputStream bos = new BufferedOutputStream(fos);
            ObjectOutputStream oos = new ObjectOutputStream(bos);
            oos.writeObject(obj);
            oos.close();
        }

        public static Object deserialize(String filename)
                throws IOException, ClassNotFoundException {
            FileInputStream fis = new FileInputStream(filename);
            BufferedInputStream bis = new BufferedInputStream(fis);
            ObjectInputStream ois = new ObjectInputStream(bis);
            Object obj = ois.readObject();
            ois.close();
            return obj;
        }
    }
  learner_created: true
- name: src/blockchain/Blockchain.java
  visible: true
  text: |
    package blockchain.impl;

    import blockchain.impl.Block;
    import blockchain.service.IdService;

    import java.util.LinkedList;
    import java.util.List;

    public class Blockchain {
        private List<Block> blockchain;

        public Blockchain() {
            blockchain = new LinkedList<>();
        }

        public void createBlock() {
            int id = IdService.getNewId();

            Block block =
                    id == 1
                    ? new Block(id, "0")
                    : new Block(id, blockchain.get(blockchain.size() - 1).getHash());

            blockchain.add(block);
        }

        @Override
        public String toString() {
            StringBuilder stringBuilder = new StringBuilder();

            for (Block block : blockchain) {
                stringBuilder.append(block + "\n");
            }

            return stringBuilder.toString();
        }
    }
  learner_created: false
- name: src/blockchain/util/RandomUtil.java
  visible: true
  learner_created: true
- name: src/blockchain/block/Block.java
  visible: true
  text: |
    package blockchain.impl;

    import blockchain.util.StringUtil;

    import java.util.Date;

    class Block {

        private int id;
        private long timestamp;
        private String previousHash;
        private String hash;

        public Block(int id, String previousHash) {
            this.id = id;
            this.timestamp = new Date().getTime();
            this.previousHash = previousHash;
            this.hash = calculateBlockHash();
        }

        private String calculateBlockHash() {
            String fieldsOfBlock = Integer.toString(id)
                    + timestamp
                    + previousHash;

            return StringUtil.applySha256(fieldsOfBlock);
        }

        public String getHash() {
            return hash;
        }

        @Override
        public String toString() {
            StringBuilder stringBuilder = new StringBuilder();

            stringBuilder.append("Block:\n");
            stringBuilder.append("Id: " + id + "\n");
            stringBuilder.append("Timestamp: " + timestamp + "\n");
            stringBuilder.append("Hash of the previous block:\n");
            stringBuilder.append(previousHash + "\n");
            stringBuilder.append("Hash of the block:\n");
            stringBuilder.append(hash + "\n");

            return stringBuilder.toString();
        }
    }
  learner_created: false
- name: src/blockchain/factory/BlockchainFactory.java
  visible: true
  learner_created: true
- name: src/blockchain/util/StopWatch.java
  visible: true
  learner_created: true
- name: src/blockchain/miner/Miner.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/50/stages/273/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Thu, 19 Aug 2021 06:27:27 UTC
record: 3
