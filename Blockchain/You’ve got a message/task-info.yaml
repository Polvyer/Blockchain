type: edu
custom_name: stage4
files:
- name: src/blockchain/Main.java
  visible: true
  text: |
    package blockchain;

    import blockchain.ui.UserInterface;

    public class Main {
        public static void main(String[] args) {
            UserInterface userInterface = new UserInterface();
            userInterface.start();
        }
    }
  learner_created: false
- name: src/blockchain/util/StringUtil.java
  visible: true
  text: |
    package blockchain.util;
    import java.security.MessageDigest;

    public final class StringUtil {
        /* Applies Sha256 to a string and returns a hash. */
        public static String applySha256(String input){
            try {
                MessageDigest digest = MessageDigest.getInstance("SHA-256");
                /* Applies sha256 to our input */
                byte[] hash = digest.digest(input.getBytes("UTF-8"));
                StringBuilder hexString = new StringBuilder();
                for (byte elem: hash) {
                    String hex = Integer.toHexString(0xff & elem);
                    if(hex.length() == 1) hexString.append('0');
                    hexString.append(hex);
                }
                return hexString.toString();
            }
            catch(Exception e) {
                throw new RuntimeException(e);
            }
        }
    }
  learner_created: false
- name: src/blockchain/ui/UserInterface.java
  visible: true
  text: |
    package blockchain.ui;

    import blockchain.impl.Blockchain;

    public class UserInterface {
        public void start() {
            Blockchain blockchain = new Blockchain();

            for (int i = 0; i < 5; i++) {
                blockchain.createBlock();
            }

            System.out.println(blockchain);
        }

    }
  learner_created: false
- name: test/BlockchainTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;


    class BlockParseException extends Exception {
        BlockParseException(String msg) {
            super(msg);
        }
    }


    class Block {

        int id;
        long timestamp;
        long magic;
        String hashprev;
        String hash;

        static Block parseBlock(String strBlock) throws BlockParseException {
            if (strBlock.length() == 0) {
                return null;
            }

            if (!(strBlock.contains("Block:")
                && strBlock.contains("Timestamp:"))) {

                return null;
            }

            Block block = new Block();

            List<String> lines = strBlock
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            if (lines.size() < 12) {
                throw new BlockParseException("Every block should " +
                    "contain at least 12 lines of data");
            }

            if (!lines.get(0).equals("Block:")) {
                throw new BlockParseException("First line of every block " +
                    "should be \"Block:\"");
            }

            if (!lines.get(1).startsWith("Created by")) {
                throw new BlockParseException("Second line of every block " +
                    "should start with \"Created by\"");
            }

            if (!lines.get(2).startsWith("Id:")) {
                throw new BlockParseException("Third line of every block " +
                    "should start with \"Id:\"");
            }

            String id = lines.get(2).split(":")[1]
                .strip().replace("-", "");
            boolean isNumeric = id.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Id should be a number");
            }

            block.id = Integer.parseInt(id);



            if (!lines.get(3).startsWith("Timestamp:")) {
                throw new BlockParseException("4-th line of every block " +
                    "should start with \"Timestamp:\"");
            }

            String timestamp = lines.get(3).split(":")[1]
                .strip().replace("-", "");
            isNumeric = timestamp.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Timestamp should be a number");
            }

            block.timestamp = Long.parseLong(timestamp);


            if (!lines.get(4).startsWith("Magic number:")) {
                throw new BlockParseException("5-th line of every block " +
                    "should start with \"Magic number:\"");
            }

            String magic = lines.get(4).split(":")[1]
                .strip().replace("-", "");
            isNumeric = magic.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Magic number should be a number");
            }

            block.magic = Long.parseLong(magic);



            if (!lines.get(5).equals("Hash of the previous block:")) {
                throw new BlockParseException("6-th line of every block " +
                    "should be \"Hash of the previous block:\"");
            }

            if (!lines.get(7).equals("Hash of the block:")) {
                throw new BlockParseException("8-th line of every block " +
                    "should be \"Hash of the block:\"");
            }

            String prevhash = lines.get(6).strip();
            String hash = lines.get(8).strip();

            if (!(prevhash.length() == 64 || prevhash.equals("0"))
                || !(hash.length() == 64)) {

                throw new BlockParseException("Hash length should " +
                    "be equal to 64 except \"0\"");
            }

            block.hash = hash;
            block.hashprev = prevhash;

            if (!lines.get(9).startsWith("Block data:")) {
                throw new BlockParseException("10-th line of every block " +
                    "should start with \"Block data:\"");
            }

            return block;
        }


        static List<Block> parseBlocks(String output) throws BlockParseException {
            String[] strBlocks = output.split("\n\n");

            List<Block> blocks = new ArrayList<>();

            for (String strBlock : strBlocks) {
                Block block = parseBlock(strBlock.strip());
                if (block != null) {
                    blocks.add(block);
                }
            }

            return blocks;
        }
    }

    class Clue {
        String zeros;
        Clue(int n) {
            zeros = "0".repeat(n);
        }
    }


    public class BlockchainTest extends StageTest<Clue> {

        List<String> previousOutputs = new ArrayList<>();

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                new TestCase<>(),
                new TestCase<>()
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            if (previousOutputs.contains(reply)) {
                return new CheckResult(false,
                    "You already printed this text in the previous tests");
            }

            previousOutputs.add(reply);

            List<Block> blocks;
            try {
                blocks = Block.parseBlocks(reply);
            } catch (BlockParseException ex) {
                return new CheckResult(false, ex.getMessage());
            } catch (Exception ex) {
                return CheckResult.wrong("");
            }

            if (blocks.size() != 5) {
                return new CheckResult(false,
                    "You should output 5 blocks, found " + blocks.size());
            }

            for (int i = 1; i < blocks.size(); i++) {
                Block curr = blocks.get(i - 1);
                Block next = blocks.get(i);

                if (curr.id + 1 != next.id) {
                    return new CheckResult(false,
                        "Id`s of blocks should increase by 1");
                }

                if (next.timestamp < curr.timestamp) {
                    return new CheckResult(false,
                        "Timestamp`s of blocks should increase");
                }

                if (!next.hashprev.equals(curr.hash)) {
                    return new CheckResult(false, "Two hashes aren't equal, " +
                        "but should");
                }
            }


            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/blockchain/util/BlockchainConstants.java
  visible: true
  text: |
    package blockchain.util;

    public final class BlockchainConstants {

        public final static String BLOCKCHAIN_FILENAME = "blockchain.data";
        public final static int INITIAL_ZEROS_BLOCK_HASH_MUST_START_WITH = 0;
        public final static int NUMBER_OF_MINERS = Runtime.getRuntime().availableProcessors();
        public final static int UPPER_CREATION_TIME_LIMIT_IN_SECONDS = 60;
        public final static int LOWER_CREATION_TIME_LIMIT_IN_SECONDS = 5;
        public final static int NUMBER_OF_BLOCKS_TO_CREATE = 5;
    }
  learner_created: true
- name: src/blockchain/util/RandomUtil.java
  visible: true
  text: |
    package blockchain.util;

    import java.util.Random;

    public final class RandomUtil {

        private final static Random generator = new Random();

        public static int getRandomNumber() {
            return generator.nextInt();
        }
    }
  learner_created: true
- name: src/blockchain/util/StopWatch.java
  visible: true
  text: |
    package blockchain.util;

    import java.util.concurrent.TimeUnit;

    public final class StopWatch {

        private long startTimeInNanoseconds;
        private long stopTimeInNanoseconds;
        private boolean running;

        public StopWatch() {
            this.running = false;
        }

        public void start() {
            startTimeInNanoseconds = getTimeInNanoseconds();
            setRunning(true);
        }

        public void stop() {
            stopTimeInNanoseconds = getTimeInNanoseconds();
            setRunning(false);
        }

        public long getElapsedTimeInSeconds() {
            if (running) {
                final long creationTimeInNanoseconds = getTimeInNanoseconds() - startTimeInNanoseconds;
                return convertNanosecondsToSeconds(creationTimeInNanoseconds);
            }

            final long creationTimeInNanoseconds = stopTimeInNanoseconds - startTimeInNanoseconds;
            return convertNanosecondsToSeconds(creationTimeInNanoseconds);
        }

        private long getTimeInNanoseconds() {
            return System.nanoTime();
        }

        private void setRunning(boolean running) {
            this.running = running;
        }

        private synchronized static long convertNanosecondsToSeconds(Long timeInNanoseconds) {
            return TimeUnit.SECONDS
                    .convert(timeInNanoseconds, TimeUnit.NANOSECONDS);
        }
    }
  learner_created: true
- name: src/blockchain/factory/BlockchainFactory.java
  visible: true
  text: |
    package blockchain.factory;

    import blockchain.Blockchain;
    import blockchain.util.SerializationUtil;

    import java.io.File;
    import java.io.IOException;

    import static blockchain.util.BlockchainConstants.BLOCKCHAIN_FILENAME;

    public final class BlockchainFactory {

        private static BlockchainFactory instance;

        private BlockchainFactory() {
        }

        public static BlockchainFactory getInstance() {
            if (instance == null) {
                instance = new BlockchainFactory();
            }
            return instance;
        }

        public Blockchain orderBlockchain() {
            if (blockchainFileExists()) {
                return loadBlockchainFromFile();
            }

            return createBlockchain();
        }

        private boolean blockchainFileExists() {
            return new File(BLOCKCHAIN_FILENAME).exists();
        }

        private Blockchain loadBlockchainFromFile() {
            try {
                return (Blockchain) SerializationUtil.deserialize(BLOCKCHAIN_FILENAME);
            } catch (IOException | ClassNotFoundException e) {
                throw new RuntimeException("Failed to deserialize the blockchain from the file");
            }
        }

        private Blockchain createBlockchain() {
            return new Blockchain();
        }
    }
  learner_created: true
- name: src/blockchain/util/SerializationUtil.java
  visible: true
  text: |
    package blockchain.util;

    import java.io.*;

    public final class SerializationUtil {

        public static void serialize(Object obj, String filename)
                throws IOException {
            FileOutputStream fos = new FileOutputStream(filename);
            BufferedOutputStream bos = new BufferedOutputStream(fos);
            ObjectOutputStream oos = new ObjectOutputStream(bos);
            oos.writeObject(obj);
            oos.close();
        }

        public static Object deserialize(String filename)
                throws IOException, ClassNotFoundException {
            FileInputStream fis = new FileInputStream(filename);
            BufferedInputStream bis = new BufferedInputStream(fis);
            ObjectInputStream ois = new ObjectInputStream(bis);
            Object obj = ois.readObject();
            ois.close();
            return obj;
        }
    }
  learner_created: true
- name: src/blockchain/client/Miner.java
  visible: true
  text: |
    package blockchain.miner;

    import blockchain.Blockchain;
    import blockchain.block.Block;
    import blockchain.util.RandomUtil;
    import blockchain.util.StopWatch;

    import java.util.concurrent.Callable;

    public final class Miner implements Callable<Block> {

        private final Blockchain blockchain;
        private final StopWatch stopWatch;

        public Miner(Blockchain blockchain) {
            this.blockchain = blockchain;
            this.stopWatch = new StopWatch();
        }

        @Override
        public Block call() {
            stopWatch.start();
            final Block newBlock = mineBlock();
            stopWatch.stop();
            final long creationTimeInSeconds = stopWatch.getElapsedTimeInSeconds();
            newBlock.setCreationTimeInSeconds(creationTimeInSeconds);
            return newBlock;
        }

        private Block mineBlock() {
            final Block newBlock = createBlock();
            final int magicNumber = findMagicNumberForBlock(newBlock);
            newBlock.setMagicNumber(magicNumber);
            return newBlock;
        }

        private Block createBlock() {
            final String creator = getCreator();
            final long id = blockchain.getUniqueId();
            final String previousHash = blockchain.getPreviousHash();
            return new Block(creator, id, previousHash);
        }

        private String getCreator() {
            final String name = Thread.currentThread().getName();
            return name.split("")[name.length() - 1];
        }

        private int findMagicNumberForBlock(Block block) {
            int magicNumber = getNewMagicNumber();
            while(!isInterrupted() && !magicNumberMakeBlockValid(magicNumber, block)) {
                magicNumber = getNewMagicNumber();
            }
            return magicNumber;
        }

        private int getNewMagicNumber() {
            return RandomUtil.getRandomNumber();
        }

        private boolean isInterrupted() {
            return Thread.currentThread().isInterrupted();
        }

        private boolean magicNumberMakeBlockValid(int magicNumber, Block block) {
            final String hash = block.generateHashUsingMagicNumber(magicNumber);
            final int zerosHashMustStartWith = blockchain.getZerosHashMustStartWith();
            final String validHashRegex = String.format("[0]{%d}\\w*", zerosHashMustStartWith);
            return hash.matches(validHashRegex);
        }
    }
  learner_created: true
- name: src/blockchain/impl/Block.java
  visible: true
  text: |
    package blockchain.block;

    import blockchain.util.StringUtil;

    import java.io.Serializable;
    import java.util.Date;

    public final class Block implements Serializable {

        private static final long serialVersionUID = 1L;

        private final String creator;
        private final long id;
        private final long timestamp;
        private int magicNumber;
        private final String previousHash;
        private long creationTimeInSeconds;

        public Block(String creator, long id, String previousHash) {
            this.creator = creator;
            this.id = id;
            this.timestamp = new Date().getTime();
            this.previousHash = previousHash;
        }

        public void print() {
            System.out.println(this);
        }

        public void setMagicNumber(int magicNumber) {
            this.magicNumber = magicNumber;
        }

        public String getPreviousHash() {
            return this.previousHash;
        }

        public void setCreationTimeInSeconds(long creationTimeInSeconds) {
            this.creationTimeInSeconds = creationTimeInSeconds;
        }

        public long getCreationTimeInSeconds() {
            return creationTimeInSeconds;
        }

        public String generateHash() {
            return generateHashUsingMagicNumber(magicNumber);
        }

        public String generateHashUsingMagicNumber(int magicNumber) {
            final StringBuilder fieldsOfBlock = new StringBuilder();
            fieldsOfBlock.append(id)
                    .append(timestamp)
                    .append(magicNumber)
                    .append(previousHash);
            return StringUtil.applySha256(fieldsOfBlock.toString());
        }

        @Override
        public String toString() {
            final StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append(System.lineSeparator())
                    .append("Block:")
                    .append(System.lineSeparator())
                    .append("Created by miner #")
                    .append(creator)
                    .append(System.lineSeparator())
                    .append("Id: ")
                    .append(id)
                    .append(System.lineSeparator())
                    .append("Timestamp: ")
                    .append(timestamp)
                    .append(System.lineSeparator())
                    .append("Magic number: ")
                    .append(magicNumber)
                    .append(System.lineSeparator())
                    .append("Hash of the previous block:")
                    .append(System.lineSeparator())
                    .append(previousHash)
                    .append(System.lineSeparator())
                    .append("Hash of the block:")
                    .append(System.lineSeparator())
                    .append(generateHash())
                    .append(System.lineSeparator())
                    .append("Block was generating for ")
                    .append(creationTimeInSeconds)
                    .append(creationTimeInSeconds == 1 ? " second" : " seconds");
            return stringBuilder.toString();
        }
    }
  learner_created: true
- name: src/blockchain/impl/Blockchain.java
  visible: true
  text: |
    package blockchain;

    import blockchain.block.Block;
    import blockchain.util.SerializationUtil;

    import java.io.IOException;
    import java.io.Serializable;
    import java.util.ArrayList;
    import java.util.List;

    import static blockchain.util.BlockchainConstants.*;

    public final class Blockchain implements Serializable {

        private static final long serialVersionUID = 1L;

        private final List<Block> blocks;
        private int zerosHashMustStartWith;

        public Blockchain() {
            blocks = new ArrayList<>();
            zerosHashMustStartWith = INITIAL_ZEROS_BLOCK_HASH_MUST_START_WITH;
        }

        public void adjustZerosHashMustStartWith() {
            final Block lastBlock = getLastBlock();
            final long blockCreationTimeInSeconds = lastBlock.getCreationTimeInSeconds();
            if (blockCreationTimeInSeconds > UPPER_CREATION_TIME_LIMIT_IN_SECONDS) {
                decrementZerosHashMustStartWith();
                System.out.println("N was decreased to " + getZerosHashMustStartWith());
            } else if (blockCreationTimeInSeconds < LOWER_CREATION_TIME_LIMIT_IN_SECONDS) {
                incrementZerosHashMustStartWith();
                System.out.println("N was increased to " + getZerosHashMustStartWith());
            } else {
                System.out.println("N stays the same");
            }
        }

        private void incrementZerosHashMustStartWith() {
            zerosHashMustStartWith += 1;
        }

        private void decrementZerosHashMustStartWith() {
            zerosHashMustStartWith -= 1;
        }

        public int getZerosHashMustStartWith() {
            return zerosHashMustStartWith;
        }

        public boolean isEmpty() {
            return blocks.isEmpty();
        }

        public synchronized long getUniqueId() {
            return size() + 1;
        }

        public synchronized String getPreviousHash() {
            return isEmpty()
                    ? "0"
                    : getLastBlock().generateHash();
        }

        private Block getLastBlock() {
            return blocks.get(size() - 1);
        }

        private int size() {
            return blocks.size();
        }

        public void addBlock(Block block) {
            if (!block.getPreviousHash().equals(getPreviousHash())) {
                throw new RuntimeException("Block is invalid");
            }
            blocks.add(block);
        }

        public void saveBlockchainToFile() {
            try {
                SerializationUtil.serialize(this, BLOCKCHAIN_FILENAME);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        @Override
        public String toString() {
            final StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append(System.lineSeparator());

            for (final Block block : blocks) {
                stringBuilder.append(block)
                        .append(System.lineSeparator());
            }

            return stringBuilder.toString();
        }
    }
  learner_created: true
- name: src/blockchain/dto/Message.java
  visible: true
  learner_created: true
- name: src/blockchain/client/impl/MessengerImpl.java
  visible: true
  learner_created: true
- name: src/blockchain/client/MessengerTask.java
  visible: true
  learner_created: true
- name: src/blockchain/simulator/MiningSimulator.java
  visible: true
  learner_created: true
- name: src/blockchain/simulator/ChatSimulator.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/50/stages/274/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sun, 29 Aug 2021 12:32:17 UTC
record: 4
